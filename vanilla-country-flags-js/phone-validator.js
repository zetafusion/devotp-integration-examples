// Function to create flag HTML using CSS
function createFlagElement(countryCode) {
    const flagMap = {
        // North America
        'US': 'ðŸ‡ºðŸ‡¸', 'MX': 'ðŸ‡²ðŸ‡½', 'BS': 'ðŸ‡§ðŸ‡¸', 'BB': 'ðŸ‡§ðŸ‡§', 'VG': 'ðŸ‡»ðŸ‡¬', 'KY': 'ðŸ‡°ðŸ‡¾',
        'CR': 'ðŸ‡¨ðŸ‡·', 'DM': 'ðŸ‡©ðŸ‡²', 'DO': 'ðŸ‡©ðŸ‡´', 'SV': 'ðŸ‡¸ðŸ‡»', 'GD': 'ðŸ‡¬ðŸ‡©', 'GT': 'ðŸ‡¬ðŸ‡¹',
        'HT': 'ðŸ‡­ðŸ‡¹', 'HN': 'ðŸ‡­ðŸ‡³', 'JM': 'ðŸ‡¯ðŸ‡²', 'MS': 'ðŸ‡²ðŸ‡¸', 'NI': 'ðŸ‡³ðŸ‡®', 'PA': 'ðŸ‡µðŸ‡¦',
        'PR': 'ðŸ‡µðŸ‡·', 'KN': 'ðŸ‡°ðŸ‡³', 'LC': 'ðŸ‡±ðŸ‡¨', 'VC': 'ðŸ‡»ðŸ‡¨', 'TT': 'ðŸ‡¹ðŸ‡¹', 'TC': 'ðŸ‡¹ðŸ‡¨',
        
        // Asia
        'AF': 'ðŸ‡¦ðŸ‡«', 'AM': 'ðŸ‡¦ðŸ‡²', 'AZ': 'ðŸ‡¦ðŸ‡¿', 'BH': 'ðŸ‡§ðŸ‡­', 'BD': 'ðŸ‡§ðŸ‡©', 'BT': 'ðŸ‡§ðŸ‡¹',
        'BN': 'ðŸ‡§ðŸ‡³', 'KH': 'ðŸ‡°ðŸ‡­', 'CN': 'ðŸ‡¨ðŸ‡³', 'KP': 'ðŸ‡°ðŸ‡µ', 'IN': 'ðŸ‡®ðŸ‡³', 'ID': 'ðŸ‡®ðŸ‡©',
        'IR': 'ðŸ‡®ðŸ‡·', 'IQ': 'ðŸ‡®ðŸ‡¶', 'IL': 'ðŸ‡®ðŸ‡±', 'JP': 'ðŸ‡¯ðŸ‡µ', 'JO': 'ðŸ‡¯ðŸ‡´', 'KZ': 'ðŸ‡°ðŸ‡¿',
        'KW': 'ðŸ‡°ðŸ‡¼', 'KG': 'ðŸ‡°ðŸ‡¬', 'LA': 'ðŸ‡±ðŸ‡¦', 'LB': 'ðŸ‡±ðŸ‡§', 'MY': 'ðŸ‡²ðŸ‡¾', 'MV': 'ðŸ‡²ðŸ‡»',
        'MN': 'ðŸ‡²ðŸ‡³', 'MM': 'ðŸ‡²ðŸ‡²', 'NP': 'ðŸ‡³ðŸ‡µ', 'OM': 'ðŸ‡´ðŸ‡²', 'PK': 'ðŸ‡µðŸ‡°', 'PS': 'ðŸ‡µðŸ‡¸',
        'PH': 'ðŸ‡µðŸ‡­', 'QA': 'ðŸ‡¶ðŸ‡¦', 'SA': 'ðŸ‡¸ðŸ‡¦', 'SG': 'ðŸ‡¸ðŸ‡¬', 'KR': 'ðŸ‡°ðŸ‡·', 'LK': 'ðŸ‡±ðŸ‡°',
        'SY': 'ðŸ‡¸ðŸ‡¾', 'TJ': 'ðŸ‡¹ðŸ‡¯', 'TH': 'ðŸ‡¹ðŸ‡­', 'TL': 'ðŸ‡¹ðŸ‡±', 'TR': 'ðŸ‡¹ðŸ‡·', 'TM': 'ðŸ‡¹ðŸ‡²',
        'AE': 'ðŸ‡¦ðŸ‡ª', 'UZ': 'ðŸ‡ºðŸ‡¿', 'VN': 'ðŸ‡»ðŸ‡³', 'YE': 'ðŸ‡¾ðŸ‡ª',
        
        // Europe
        'AL': 'ðŸ‡¦ðŸ‡±', 'AD': 'ðŸ‡¦ðŸ‡©', 'AT': 'ðŸ‡¦ðŸ‡¹', 'BY': 'ðŸ‡§ðŸ‡¾', 'BE': 'ðŸ‡§ðŸ‡ª', 'BA': 'ðŸ‡§ðŸ‡¦',
        'BG': 'ðŸ‡§ðŸ‡¬', 'HR': 'ðŸ‡­ðŸ‡·', 'CZ': 'ðŸ‡¨ðŸ‡¿', 'DK': 'ðŸ‡©ðŸ‡°', 'EE': 'ðŸ‡ªðŸ‡ª', 'FO': 'ðŸ‡«ðŸ‡´',
        'FI': 'ðŸ‡«ðŸ‡®', 'FR': 'ðŸ‡«ðŸ‡·', 'GE': 'ðŸ‡¬ðŸ‡ª', 'DE': 'ðŸ‡©ðŸ‡ª', 'GI': 'ðŸ‡¬ðŸ‡®', 'GR': 'ðŸ‡¬ðŸ‡·',
        'HU': 'ðŸ‡­ðŸ‡º', 'IS': 'ðŸ‡®ðŸ‡¸', 'IE': 'ðŸ‡®ðŸ‡ª', 'IT': 'ðŸ‡®ðŸ‡¹', 'LV': 'ðŸ‡±ðŸ‡»', 'LI': 'ðŸ‡±ðŸ‡®',
        'LT': 'ðŸ‡±ðŸ‡¹', 'LU': 'ðŸ‡±ðŸ‡º', 'MK': 'ðŸ‡²ðŸ‡°', 'MT': 'ðŸ‡²ðŸ‡¹', 'MD': 'ðŸ‡²ðŸ‡©', 'MC': 'ðŸ‡²ðŸ‡¨',
        'ME': 'ðŸ‡²ðŸ‡ª', 'NL': 'ðŸ‡³ðŸ‡±', 'NO': 'ðŸ‡³ðŸ‡´', 'PL': 'ðŸ‡µðŸ‡±', 'PT': 'ðŸ‡µðŸ‡¹', 'RO': 'ðŸ‡·ðŸ‡´',
        'RU': 'ðŸ‡·ðŸ‡º', 'SM': 'ðŸ‡¸ðŸ‡²', 'RS': 'ðŸ‡·ðŸ‡¸', 'SK': 'ðŸ‡¸ðŸ‡°', 'SI': 'ðŸ‡¸ðŸ‡®', 'ES': 'ðŸ‡ªðŸ‡¸',
        'SE': 'ðŸ‡¸ðŸ‡ª', 'CH': 'ðŸ‡¨ðŸ‡­', 'GB': 'ðŸ‡¬ðŸ‡§', 'UA': 'ðŸ‡ºðŸ‡¦', 'VA': 'ðŸ‡»ðŸ‡¦',
        
        // South America
        'AR': 'ðŸ‡¦ðŸ‡·', 'BO': 'ðŸ‡§ðŸ‡´', 'BR': 'ðŸ‡§ðŸ‡·', 'CL': 'ðŸ‡¨ðŸ‡±', 'CO': 'ðŸ‡¨ðŸ‡´', 'EC': 'ðŸ‡ªðŸ‡¨',
        'GF': 'ðŸ‡¬ðŸ‡«', 'GY': 'ðŸ‡¬ðŸ‡¾', 'PY': 'ðŸ‡µðŸ‡¾', 'PE': 'ðŸ‡µðŸ‡ª', 'SR': 'ðŸ‡¸ðŸ‡·', 'UY': 'ðŸ‡ºðŸ‡¾', 'VE': 'ðŸ‡»ðŸ‡ª',
        
        // Africa
        'DZ': 'ðŸ‡©ðŸ‡¿', 'AO': 'ðŸ‡¦ðŸ‡´', 'BJ': 'ðŸ‡§ðŸ‡¯', 'BW': 'ðŸ‡§ðŸ‡¼', 'BF': 'ðŸ‡§ðŸ‡«', 'BI': 'ðŸ‡§ðŸ‡®',
        'CM': 'ðŸ‡¨ðŸ‡²', 'CV': 'ðŸ‡¨ðŸ‡»', 'CF': 'ðŸ‡¨ðŸ‡«', 'TD': 'ðŸ‡¹ðŸ‡©', 'KM': 'ðŸ‡°ðŸ‡²', 'CG': 'ðŸ‡¨ðŸ‡¬',
        'CD': 'ðŸ‡¨ðŸ‡©', 'DJ': 'ðŸ‡©ðŸ‡¯', 'EG': 'ðŸ‡ªðŸ‡¬', 'GQ': 'ðŸ‡¬ðŸ‡¶', 'ER': 'ðŸ‡ªðŸ‡·', 'ET': 'ðŸ‡ªðŸ‡¹',
        'GA': 'ðŸ‡¬ðŸ‡¦', 'GM': 'ðŸ‡¬ðŸ‡²', 'GH': 'ðŸ‡¬ðŸ‡­', 'GN': 'ðŸ‡¬ðŸ‡³', 'GW': 'ðŸ‡¬ðŸ‡¼', 'CI': 'ðŸ‡¨ðŸ‡®',
        'KE': 'ðŸ‡°ðŸ‡ª', 'LS': 'ðŸ‡±ðŸ‡¸', 'LR': 'ðŸ‡±ðŸ‡·', 'LY': 'ðŸ‡±ðŸ‡¾', 'MG': 'ðŸ‡²ðŸ‡¬', 'MW': 'ðŸ‡²ðŸ‡¼',
        'ML': 'ðŸ‡²ðŸ‡±', 'MR': 'ðŸ‡²ðŸ‡·', 'MU': 'ðŸ‡²ðŸ‡º', 'YT': 'ðŸ‡¾ðŸ‡¹', 'MA': 'ðŸ‡²ðŸ‡¦', 'MZ': 'ðŸ‡²ðŸ‡¿',
        'NA': 'ðŸ‡³ðŸ‡¦', 'NE': 'ðŸ‡³ðŸ‡ª', 'NG': 'ðŸ‡³ðŸ‡¬', 'RW': 'ðŸ‡·ðŸ‡¼', 'ST': 'ðŸ‡¸ðŸ‡¹', 'SN': 'ðŸ‡¸ðŸ‡³',
        'SC': 'ðŸ‡¸ðŸ‡¨', 'SL': 'ðŸ‡¸ðŸ‡±', 'SO': 'ðŸ‡¸ðŸ‡´', 'ZA': 'ðŸ‡¿ðŸ‡¦', 'SS': 'ðŸ‡¸ðŸ‡¸', 'SD': 'ðŸ‡¸ðŸ‡©',
        'SZ': 'ðŸ‡¸ðŸ‡¿', 'TZ': 'ðŸ‡¹ðŸ‡¿', 'TG': 'ðŸ‡¹ðŸ‡¬', 'TN': 'ðŸ‡¹ðŸ‡³', 'UG': 'ðŸ‡ºðŸ‡¬', 'ZM': 'ðŸ‡¿ðŸ‡²', 'ZW': 'ðŸ‡¿ðŸ‡¼',
        
        // Oceania
        'AU': 'ðŸ‡¦ðŸ‡º', 'FJ': 'ðŸ‡«ðŸ‡¯', 'PF': 'ðŸ‡µðŸ‡«', 'GU': 'ðŸ‡¬ðŸ‡º', 'MH': 'ðŸ‡²ðŸ‡­', 'FM': 'ðŸ‡«ðŸ‡²',
        'NC': 'ðŸ‡³ðŸ‡¨', 'NZ': 'ðŸ‡³ðŸ‡¿', 'NF': 'ðŸ‡³ðŸ‡«', 'PW': 'ðŸ‡µðŸ‡¼', 'PG': 'ðŸ‡µðŸ‡¬', 'WS': 'ðŸ‡¼ðŸ‡¸',
        'SB': 'ðŸ‡¸ðŸ‡§', 'TO': 'ðŸ‡¹ðŸ‡´', 'TV': 'ðŸ‡¹ðŸ‡»', 'VU': 'ðŸ‡»ðŸ‡º'
    };

    // Return the emoji flag or fall back to country code
    return flagMap[countryCode] || countryCode;
}

// Country code to flag and name mapping
const countryData = {
    '+1': { flag: 'US', name: 'United States', codes: ['+1'] },
    '+52': { flag: 'MX', name: 'Mexico', codes: ['+52'] },
    '+91': { flag: 'IN', name: 'India', codes: ['+91'] },
    '+81': { flag: 'JP', name: 'Japan', codes: ['+81'] },
    '+90': { flag: 'TR', name: 'Turkey', codes: ['+90'] },
    '+44': { flag: 'GB', name: 'United Kingdom', codes: ['+44'] },
    '+49': { flag: 'DE', name: 'Germany', codes: ['+49'] },
    '+33': { flag: 'FR', name: 'France', codes: ['+33'] },
    '+86': { flag: 'CN', name: 'China', codes: ['+86'] },
    '+7': { flag: 'RU', name: 'Russia', codes: ['+7'] },
    '+55': { flag: 'BR', name: 'Brazil', codes: ['+55'] },
    '+61': { flag: 'AU', name: 'Australia', codes: ['+61'] },
    '+39': { flag: 'IT', name: 'Italy', codes: ['+39'] },
    '+34': { flag: 'ES', name: 'Spain', codes: ['+34'] },
    '+31': { flag: 'NL', name: 'Netherlands', codes: ['+31'] },
    '+46': { flag: 'SE', name: 'Sweden', codes: ['+46'] },
    '+47': { flag: 'NO', name: 'Norway', codes: ['+47'] },
    '+45': { flag: 'DK', name: 'Denmark', codes: ['+45'] },
    '+358': { flag: 'FI', name: 'Finland', codes: ['+358'] },
    '+41': { flag: 'CH', name: 'Switzerland', codes: ['+41'] },
    '+43': { flag: 'AT', name: 'Austria', codes: ['+43'] },
    '+32': { flag: 'BE', name: 'Belgium', codes: ['+32'] },
    '+351': { flag: 'PT', name: 'Portugal', codes: ['+351'] },
    '+30': { flag: 'GR', name: 'Greece', codes: ['+30'] },
    '+48': { flag: 'PL', name: 'Poland', codes: ['+48'] },
    '+420': { flag: 'CZ', name: 'Czech Republic', codes: ['+420'] },
    '+36': { flag: 'HU', name: 'Hungary', codes: ['+36'] },
    '+40': { flag: 'RO', name: 'Romania', codes: ['+40'] },
    '+359': { flag: 'BG', name: 'Bulgaria', codes: ['+359'] },
    '+385': { flag: 'HR', name: 'Croatia', codes: ['+385'] },
    '+381': { flag: 'RS', name: 'Serbia', codes: ['+381'] },
    '+386': { flag: 'SI', name: 'Slovenia', codes: ['+386'] },
    '+421': { flag: 'SK', name: 'Slovakia', codes: ['+421'] },
    '+372': { flag: 'EE', name: 'Estonia', codes: ['+372'] },
    '+371': { flag: 'LV', name: 'Latvia', codes: ['+371'] },
    '+370': { flag: 'LT', name: 'Lithuania', codes: ['+370'] },
    '+353': { flag: 'IE', name: 'Ireland', codes: ['+353'] },
    '+354': { flag: 'IS', name: 'Iceland', codes: ['+354'] },
    '+377': { flag: 'MC', name: 'Monaco', codes: ['+377'] },
    '+376': { flag: 'AD', name: 'Andorra', codes: ['+376'] },
    '+378': { flag: 'SM', name: 'San Marino', codes: ['+378'] },
    '+379': { flag: 'VA', name: 'Vatican City', codes: ['+379'] },
    '+380': { flag: 'UA', name: 'Ukraine', codes: ['+380'] },
    '+375': { flag: 'BY', name: 'Belarus', codes: ['+375'] },
    '+373': { flag: 'MD', name: 'Moldova', codes: ['+373'] },
    '+382': { flag: 'ME', name: 'Montenegro', codes: ['+382'] },
    '+389': { flag: 'MK', name: 'North Macedonia', codes: ['+389'] },
    '+355': { flag: 'AL', name: 'Albania', codes: ['+355'] },
    '+387': { flag: 'BA', name: 'Bosnia and Herzegovina', codes: ['+387'] },
    '+995': { flag: 'GE', name: 'Georgia', codes: ['+995'] },
    // Add more countries as needed...
};

// Function to detect country from phone number
function detectCountry(phoneNumber) {
    if (!phoneNumber.startsWith('+')) {
        return null;
    }
    
    // Sort codes by length (longest first) to match most specific codes first
    const sortedCodes = Object.keys(countryData).sort((a, b) => b.length - a.length);
    
    for (const code of sortedCodes) {
        if (phoneNumber.startsWith(code)) {
            return countryData[code];
        }
    }
    
    return null;
}

// Function to validate phone number format
function validatePhoneNumber(value) {
    // Allow only + at the beginning and numbers
    const validPattern = /^\+?[0-9]*$/;
    return validPattern.test(value);
}

// Function to sanitize input (remove invalid characters)
function sanitizePhoneInput(value) {
    // If it starts with +, keep the + and only numbers after it
    if (value.startsWith('+')) {
        return '+' + value.slice(1).replace(/[^0-9]/g, '');
    } else if (value.length > 0 && !value.startsWith('+')) {
        // If user starts typing without +, add it
        return '+' + value.replace(/[^0-9]/g, '');
    }
    return value.replace(/[^0-9+]/g, '');
}

// Function to show status message
function showStatus(message, isError = false) {
    const statusDiv = document.getElementById('status');
    if (statusDiv) {
        statusDiv.textContent = message;
        statusDiv.className = isError ? 'status-error' : 'status-success';
        statusDiv.style.display = 'block';
        
        // Hide after 3 seconds
        setTimeout(() => {
            statusDiv.style.display = 'none';
        }, 3000);
    }
}

// Main phone input handler
function initPhoneValidator() {
    const phoneInput = document.getElementById('phoneInput');
    const flagContainer = document.getElementById('flagContainer');
    const countryInfo = document.getElementById('countryInfo');
    const inputContainer = phoneInput?.closest('.input-container');
    
    if (!phoneInput || !flagContainer) {
        console.error('Phone input or flag container not found');
        return;
    }
    
    phoneInput.addEventListener('input', function(e) {
        let value = e.target.value;
        
        // Sanitize input
        const sanitizedValue = sanitizePhoneInput(value);
        
        // If the sanitized value is different, update the input
        if (sanitizedValue !== value) {
            e.target.value = sanitizedValue;
            value = sanitizedValue;
        }
        
        // Clear previous flag and country info
        flagContainer.innerHTML = '';
        if (countryInfo) {
            countryInfo.style.display = 'none';
        }
        
        // Remove validation classes
        if (inputContainer) {
            inputContainer.classList.remove('valid', 'invalid');
        }
        
        // Detect country if we have a valid start
        if (value.length > 1) {
            const country = detectCountry(value);
            if (country) {
                // Use createFlagElement to get the emoji flag
                const flagEmoji = createFlagElement(country.flag);
                flagContainer.innerHTML = `<span>${flagEmoji}</span>`;
                
                if (countryInfo) {
                    countryInfo.innerHTML = `<strong>${country.name}</strong> (${country.codes.join(', ')})`;
                    countryInfo.style.display = 'block';
                }
                
                // Validate the number format
                if (validatePhoneNumber(value)) {
                    if (inputContainer) inputContainer.classList.add('valid');
                } else {
                    if (inputContainer) inputContainer.classList.add('invalid');
                }
            } else if (value.length > 4) {
                // If no country found and we have enough digits, show error
                if (inputContainer) inputContainer.classList.add('invalid');
                showStatus('Invalid country code', true);
            }
        }
    });
    
    // Prevent paste of invalid characters
    phoneInput.addEventListener('paste', function(e) {
        e.preventDefault();
        const pastedText = (e.clipboardData || window.clipboardData).getData('text');
        const sanitizedText = sanitizePhoneInput(pastedText);
        e.target.value = sanitizedText;
        
        // Trigger input event to update flag
        e.target.dispatchEvent(new Event('input'));
    });
    
    // Prevent invalid key presses
    phoneInput.addEventListener('keydown', function(e) {
        // Allow: backspace, delete, tab, escape, enter
        if ([8, 9, 27, 13, 46].indexOf(e.keyCode) !== -1 ||
            // Allow: Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X
            (e.keyCode === 65 && e.ctrlKey === true) ||
            (e.keyCode === 67 && e.ctrlKey === true) ||
            (e.keyCode === 86 && e.ctrlKey === true) ||
            (e.keyCode === 88 && e.ctrlKey === true) ||
            // Allow: home, end, left, right
            (e.keyCode >= 35 && e.keyCode <= 39)) {
            return;
        }
        
        // Allow + only at the beginning
        if (e.key === '+' && e.target.selectionStart === 0 && !e.target.value.includes('+')) {
            return;
        }
        
        // Allow numbers
        if ((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105)) {
            return;
        }
        
        // Prevent all other keys
        e.preventDefault();
    });
}

// Initialize when DOM is loaded
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initPhoneValidator);
} else {
    initPhoneValidator();
}